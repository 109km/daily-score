{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Header","Content","columns","title","dataIndex","key","DefaultPagination","current","App","resetPagination","setState","pageIndex","pagination","onDateChange","date","datestring","a","updateList","getData","state","currentDate","url","window","location","href","indexOf","fetch","limit","length","res","json","loginUser","username","password","isLogin","message","error","onChangeUserName","e","currentTarget","value","onChangePassword","onTableChange","filters","sorters","newPagination","loading","code","total","data","pageSize","list","tableData","this","className","onChange","rowKey","record","id","dataSource","placeholder","type","onClick","Component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5a6ea371.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Layout, DatePicker, Button, Table, Input, message } from 'antd';\nimport './App.css';\n\nconst { Header, Content } = Layout;\n\n\nconst columns = [\n  {\n    title: 'id',\n    dataIndex: 'id',\n    key: 'id',\n  },\n  {\n    title: '问题1',\n    dataIndex: 'q1',\n    key: 'q1',\n  },\n  {\n    title: '问题2',\n    dataIndex: 'q2',\n    key: 'q2',\n  },\n  {\n    title: '问题3',\n    dataIndex: 'q3',\n    key: 'q3',\n  },\n  {\n    title: '姓名',\n    dataIndex: 'name',\n    key: 'name',\n  },\n  {\n    title: '电话',\n    dataIndex: 'phone',\n    key: 'phone',\n  },\n  {\n    title: '记录时间',\n    dataIndex: 'log_time',\n    key: 'log_time',\n  },\n]\n\n\nconst DefaultPagination = {\n  current: 1\n}\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      isLogin: false,\n      username: \"\",\n      password: \"\",\n      pageIndex: 0,\n      limit: 10,\n      loading: false,\n      currentDate: \"\",\n      tableData: [\n      ],\n      pagination: DefaultPagination\n    }\n  }\n\n  resetPagination = () => {\n    this.setState({\n      pageIndex: 0,\n      pagination: DefaultPagination\n    });\n  }\n\n  onDateChange = async (date, datestring) => {\n    this.resetPagination();\n    this.updateList(datestring);\n  }\n  getData = async () => {\n\n    const date = this.state.currentDate;\n\n    let url = \"http://localhost:8080/v1/ad/\";\n    if (window.location.href.indexOf(\"shulanbaobei\") >= 0) {\n      url = 'https://www.shulanbaobei.com/v1/ad/';\n    }\n    const res = await window.fetch(url + \"?start=\" + this.state.pageIndex + \"&limit=\" + this.state.limit\n      + (date.length > 0 ? (\"&date=\" + date) : \"\"));\n    const json = await res.json();\n    return json;\n  }\n\n  loginUser = () => {\n    if (this.state.username === \"admin\" && this.state.password === \"admin@20191234\") {\n      this.setState({\n        isLogin: true\n      });\n    } else {\n      message.error('用户名和密码错误');\n    }\n  }\n  onChangeUserName = (e) => {\n    this.setState({\n      username: e.currentTarget.value\n    });\n  }\n  onChangePassword = (e) => {\n    this.setState({\n      password: e.currentTarget.value\n    });\n  }\n  onTableChange = (pagination, filters, sorters) => {\n    const newPagination = { ...this.state.pagination };\n    newPagination.current = pagination.current;\n    let pageIndex = (pagination.current - 1) * this.state.limit;\n    this.setState({\n      pagination: newPagination,\n      pageIndex: pageIndex\n    }, () => {\n      this.updateList(this.state.currentDate);\n    });\n\n  }\n  updateList = async (date = \"\") => {\n    this.setState({\n      loading: true,\n      currentDate: date\n    }, async () => {\n      const res = await this.getData(date);\n      this.setState({\n        loading: false\n      });\n      if (res.code === 0) {\n        const pagination = { ...this.state.pagination };\n        pagination.total = res.data.total;\n        pagination.pageSize = this.state.limit;\n        const list = res.data.list;\n        this.setState({\n          tableData: list,\n          pagination: pagination\n        });\n      } else {\n        message.error(res.message);\n      }\n    });\n\n  }\n  async componentDidMount() {\n    this.updateList();\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        {this.state.isLogin ?\n          <Layout>\n            <Header>\n              <DatePicker onChange={this.onDateChange} />\n            </Header>\n            <Content>\n              <Table\n                columns={columns}\n                rowKey={record => record.id}\n                loading={this.state.loading}\n                dataSource={this.state.tableData}\n                pagination={this.state.pagination}\n                onChange={this.onTableChange}\n              />\n            </Content>\n          </Layout>\n          :\n          <Layout>\n            <Header>\n              <h2 className=\"login-tips\">登录</h2>\n\n            </Header>\n            <Content>\n              <div className=\"login-box\">\n                <Input placeholder=\"用户名\" value={this.state.username} onChange={this.onChangeUserName} />\n                <Input type=\"password\" placeholder=\"密码\" value={this.state.password} onChange={this.onChangePassword} />\n                <Button type=\"primary\" className=\"btn-login\" onClick={this.loginUser}>登录</Button>\n              </div>\n            </Content>\n          </Layout>\n        }\n\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}